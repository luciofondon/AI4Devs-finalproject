name: Deploy Neobus App to EC2

on:
  push:
    branches: [main]
  pull_request:
    branches: [ main ]
    types: [opened, synchronize]

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20.x'

    # Backend setup and build
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm install

    - name: Build backend
      working-directory: ./backend
      run: npm run build

    # Frontend setup and build
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm install

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_ID }}
        aws-secret-access-key: ${{ secrets.AWS_ACCESS_KEY }}
        aws-region: 'us-east-1'

    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: ${{ secrets.EC2_INSTANCE }}
        USER: ${{ secrets.EC2_USER }}
      run: |
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem

        # Crear estructura de directorios en EC2
        ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST '
          mkdir -p neobus-app/frontend \
                  neobus-app/backend \
                  neobus-app/backend/dist/database/migrations \
                  neobus-app/backend/dist/entities \
                  neobus-app/backend/scripts
        '

        # Subir frontend compilado
        scp -o StrictHostKeyChecking=no -i private_key.pem -r frontend/dist/* $USER@$HOST:neobus-app/frontend/

        # Subir artefactos del backend (sin node_modules)
        scp -o StrictHostKeyChecking=no -i private_key.pem -r backend/dist/* $USER@$HOST:neobus-app/backend/dist/
        scp -o StrictHostKeyChecking=no -i private_key.pem backend/package.json $USER@$HOST:neobus-app/backend/
        scp -o StrictHostKeyChecking=no -i private_key.pem backend/package-lock.json $USER@$HOST:neobus-app/backend/
        scp -o StrictHostKeyChecking=no -i private_key.pem backend/docker-compose.yml $USER@$HOST:neobus-app/backend/
        scp -o StrictHostKeyChecking=no -i private_key.pem backend/.env.production $USER@$HOST:neobus-app/backend/.env
        scp -o StrictHostKeyChecking=no -i private_key.pem -r backend/scripts/* $USER@$HOST:neobus-app/backend/scripts/

        # Ejecutar setup en EC2
        ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST "
          cd neobus-app/backend

          echo 'üì¶ Instalando dependencias backend en EC2...'
          npm install --include=dev

          echo 'üêò Levantando base de datos con docker-compose...'
          docker compose up -d

          echo 'üîÑ Ejecutando migraciones de la base de datos...'
          # Esperar a que PostgreSQL est√© listo
          sleep 10
          
          # Ejecutar migraciones en orden
          echo 'Ejecutando migraci√≥n inicial...'
          ENV=production npm run typeorm migration:run -- -d dist/config/typeorm-cli.config.js
          
          # Verificar que las migraciones se ejecutaron correctamente
          echo 'Verificando estado de las migraciones...'
          ENV=production npm run typeorm migration:show -- -d dist/config/typeorm-cli.config.js

          echo 'üöÄ Arrancando backend con PM2...'
          pm2 delete neobus-backend || true
          pm2 start dist/main.js --name neobus-backend
          pm2 save

          echo 'üßπ Limpiando dependencias de desarrollo...'
          npm install --omit=dev
        "

        rm -f private_key.pem
